(()=>{"use strict";function t(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(n){t(1,arguments);var a=Object.prototype.toString.call(n);return n instanceof Date||"object"===e(n)&&"[object Date]"===a?new Date(n.getTime()):"number"==typeof n||"[object Number]"===a?new Date(n):("string"!=typeof n&&"[object String]"!==a||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}var a={};function r(){return a}function o(e,a){t(2,arguments);var r=n(e),o=n(a),i=r.getTime()-o.getTime();return i<0?-1:i>0?1:i}function i(e,a){t(2,arguments);var r=n(e),o=n(a),i=r.getFullYear()-o.getFullYear(),u=r.getMonth()-o.getMonth();return 12*i+u}function u(e){t(1,arguments);var a=n(e);return a.setHours(23,59,59,999),a}function s(e){t(1,arguments);var a=n(e),r=a.getMonth();return a.setFullYear(a.getFullYear(),r+1,0),a.setHours(23,59,59,999),a}function d(e){t(1,arguments);var a=n(e);return u(a).getTime()===s(a).getTime()}function l(e,a){t(2,arguments);var r,u=n(e),s=n(a),l=o(u,s),c=Math.abs(i(u,s));if(c<1)r=0;else{1===u.getMonth()&&u.getDate()>27&&u.setDate(30),u.setMonth(u.getMonth()-l*c);var m=o(u,s)===-l;d(n(e))&&1===c&&1===o(e,s)&&(m=!1),r=l*(c-Number(m))}return 0===r?0:r}function c(e,a){return t(2,arguments),n(e).getTime()-n(a).getTime()}var m={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(t){return t<0?Math.ceil(t):Math.floor(t)}};function h(t){return t?m[t]:m.trunc}function f(e,n,a){t(2,arguments);var r=c(e,n)/1e3;return h(null==a?void 0:a.roundingMethod)(r)}var g={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var b,y={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},p={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function w(t){return function(e,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):r;a=t.formattingValues[o]||t.formattingValues[r]}else{var i=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;a=t.values[u]||t.values[i]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function M(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],o=e.match(r);if(!o)return null;var i,u=o[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(s)?D(s,(function(t){return t.test(u)})):S(s,(function(t){return t.test(u)}));i=t.valueCallback?t.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var l=e.slice(u.length);return{value:i,rest:l}}}function S(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function D(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const C={code:"en-US",formatDistance:function(t,e,n){var a,r=g[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:y,formatRelative:function(t,e,n,a){return p[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:w({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:w({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:w({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:w({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:w({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(b={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(b.matchPattern);if(!n)return null;var a=n[0],r=t.match(b.parsePattern);if(!r)return null;var o=b.valueCallback?b.valueCallback(r[0]):r[0];o=e.valueCallback?e.valueCallback(o):o;var i=t.slice(a.length);return{value:o,rest:i}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function E(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function k(t){return E({},t)}function A(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var L=1440,W=43200;function x(e,a,i){var u,s;t(2,arguments);var d=r(),c=null!==(u=null!==(s=null==i?void 0:i.locale)&&void 0!==s?s:d.locale)&&void 0!==u?u:C;if(!c.formatDistance)throw new RangeError("locale must contain formatDistance property");var m=o(e,a);if(isNaN(m))throw new RangeError("Invalid time value");var h,g,v=E(k(i),{addSuffix:Boolean(null==i?void 0:i.addSuffix),comparison:m});m>0?(h=n(a),g=n(e)):(h=n(e),g=n(a));var b,y=f(g,h),p=(A(g)-A(h))/1e3,w=Math.round((y-p)/60);if(w<2)return null!=i&&i.includeSeconds?y<5?c.formatDistance("lessThanXSeconds",5,v):y<10?c.formatDistance("lessThanXSeconds",10,v):y<20?c.formatDistance("lessThanXSeconds",20,v):y<40?c.formatDistance("halfAMinute",0,v):y<60?c.formatDistance("lessThanXMinutes",1,v):c.formatDistance("xMinutes",1,v):0===w?c.formatDistance("lessThanXMinutes",1,v):c.formatDistance("xMinutes",w,v);if(w<45)return c.formatDistance("xMinutes",w,v);if(w<90)return c.formatDistance("aboutXHours",1,v);if(w<L){var M=Math.round(w/60);return c.formatDistance("aboutXHours",M,v)}if(w<2520)return c.formatDistance("xDays",1,v);if(w<W){var S=Math.round(w/L);return c.formatDistance("xDays",S,v)}if(w<86400)return b=Math.round(w/W),c.formatDistance("aboutXMonths",b,v);if((b=l(g,h))<12){var D=Math.round(w/W);return c.formatDistance("xMonths",D,v)}var x=b%12,P=Math.floor(b/12);return x<3?c.formatDistance("aboutXYears",P,v):x<9?c.formatDistance("overXYears",P,v):c.formatDistance("almostXYears",P+1,v)}!function(){const t=document.getElementById("darkMode"),e=document.querySelector("html"),n=document.querySelector(".new"),a=document.querySelector(".newEvent"),r=document.querySelector(".options"),o=document.querySelector(".optionBtn");function i(t,e,n){t.classList.toggle(e,n)}"true"==localStorage.getItem("darkMode")&&(e.classList.add("dark"),t.checked=!0),t.addEventListener("change",(n=>{i(e,"dark",t.checked),localStorage.setItem("darkMode",t.checked)})),document.addEventListener("click",(t=>{t.target.closest(".newEvent")||t.target.closest(".new")||i(a,"hidden",!0)})),n.addEventListener("click",(t=>{i(a,"hidden"),a.querySelector("#name").focus()})),document.addEventListener("click",(t=>{t.target.closest(".options")||t.target.closest(".optionBtn")||i(r,"hidden",!0)})),o.addEventListener("click",(t=>{i(r,"hidden")}))}(),document.querySelector(".search").addEventListener("input",(t=>{!function(t){const e=t.target.value;[...document.querySelectorAll(".list li")].forEach((t=>{t.querySelector("p").textContent.toLowerCase().includes(e.toLowerCase())?t.classList.remove("hidden"):t.classList.add("hidden")}))}(t)}));const P=function(){class e{constructor(t,e,n,a,r,o){this.name=t,this.date=e?new Date(e):"Anytime",this.notes=n,this.subItem=a??[],this.category=r??[],this.done=o??!1}get formatDate(){return`${this.getMDY} ${this.getHoursMins}`}get getMDY(){return`${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][function(e){return t(1,arguments),n(e).getMonth()}(this.date)]} ${function(e){return t(1,arguments),n(e).getDate()}(this.date)}, ${function(e){return t(1,arguments),n(e).getFullYear()}(this.date)}`}get getHoursMins(){let e=function(e){t(1,arguments);var a=n(e).getHours();return a}(this.date),a=function(e){t(1,arguments);var a=n(e).getMinutes();return a}(this.date),r="am";return e>12&&(e-=12,r="pm"),1==String(e).length&&(e=`0${e}`),1==String(a).length&&(a=`0${a}`),e+":"+a+r}updateData(t,e,n){"subItem"===e?this[e][n].val=t:this[e]=t,"name"!==e&&"date"!==e||T(a)}remove(){const t=a.indexOf(this);-1!==t&&(a.splice(t,1),T(a),I(),r())}toggleDone(){this.done=!1===this.done,T(a),r()}}let a=[];if(localStorage.getItem("library")){let t=JSON.parse(localStorage.getItem("library"));a=t.map((t=>new e(t.name,Date.parse(t.date),t.notes,t.subItem,t.category,t.done)))}function r(){localStorage.setItem("library",JSON.stringify(a)),console.log(JSON.parse(localStorage.getItem("library")))}const o=document.querySelector("#submitBtn"),i=document.querySelector(".newEvent");return o.addEventListener("click",(t=>{!function(){const t=[...document.querySelectorAll(".newEvent input, .newEvent textarea")].map((t=>t.value)),n=new e(t[0],t[1],t[2]);a.push(n),i.reset(),r(),T(a)}()})),[...document.querySelectorAll('input[type="radio"]')].forEach((t=>{t.addEventListener("change",(t=>{var e;"alphabetical"===(e=t.target).id?(console.log("namesort"),a=a.sort((function(t,e){let n=t.name.toLowerCase(),a=e.name.toLowerCase();return n>a?1:a>n?-1:0}))):"chronological"===e.id&&(console.log("datesort"),a=a.sort((function(t,e){return t.date>e.date?1:e.date>t.date?-1:0}))),T(a),r()}))})),T(a),{updateLocal:function(){r()}}}();function T(e){const n=[...document.querySelectorAll(".nav ul")];n.forEach((t=>function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}(t))),e.forEach((e=>{let a=(new Date(e.date)-Date.now())/864e5,r=a<0||!0===e.done?5:"Anytime"===e.date?4:a<=1?0:a<=7?1:a<=30?2:3;!function(e,a){const r=document.createElement("li"),o=document.createElement("p");if(o.textContent=a.name,!0===a.done&&o.classList.add("done"),r.addEventListener("click",(t=>{I(a)})),r.appendChild(o),"Anytime"!==a.date){const o=document.createElement("p");!0===a.done&&o.classList.add("done"),e===n[0]?o.textContent=function(e,n){return t(1,arguments),x(e,Date.now(),n)}(a.date):o.textContent=a.getMDY,r.appendChild(o)}e.appendChild(r)}(n[r],e)}))}function I(t){const e=document.querySelector(".main");for(;e.firstChild;)e.removeChild(e.firstChild);if(t){function n(e,a,r,o){if(Array.isArray(a)){const t=document.createElement("ul");a.forEach(((e,a)=>{n(t,e,"subItem",a)})),e.appendChild(t)}else{const n=document.createElement("div");let i;if("notes"===r)i=document.createElement("textarea"),i.setAttribute("maxlength","140"),i.value=""===a?"New Item":a.val??a;else if(i=document.createElement("input"),"date"===r){if(i.setAttribute("type","datetime-local"),"Anytime"!==t.date){const e=new Date(t.date.getTime()+-60*t.date.getTimezoneOffset()*1e3).toISOString().slice(0,19);i.value=e}}else i.setAttribute("type","text"),i.setAttribute("maxlength","50"),i.value=""===a.val?"New Item":a.val??a,!0===a.done&&i.classList.add("done");if(i.addEventListener("change",(e=>{"date"===r?t.updateData(e.target.value?new Date(e.target.value):"Anytime",r):"subItem"===r?t.updateData(e.target.value,r,o):t.updateData(e.target.value,r),P.updateLocal()})),n.addEventListener("click",(t=>{t.target.matches(".main ul div::before"),t.target.matches(".main ul div::after")})),"subItem"===r){const t=document.createElement("button");t.type="button",t.textContent="✔",t.classList.add("before"),t.setAttribute("title","Complete"),t.addEventListener("click",(t=>{i.classList.toggle("done"),a.done=!0!==a.done})),n.appendChild(t)}if(n.appendChild(i),"subItem"===r){const e=document.createElement("button");e.type="button",e.textContent="✕",e.classList.add("after"),e.setAttribute("title","Remove"),e.addEventListener("click",(e=>{t.subItem.splice(o,1),I(t)})),n.appendChild(e)}e.appendChild(n)}}[[e,t.name,"name"],[e,"Anytime"===t.date?t.date:t.formatDate,"date"],[e,t.notes,"notes"],[e,t.subItem,"subItem"]].forEach((t=>{n(...t)}));const a=document.createElement("button");a.type="button",a.classList.add("addBtn"),a.textContent="+",a.setAttribute("title","New Item"),a.addEventListener("click",(e=>{t.subItem.push({val:"",done:!1}),n(document.querySelector(".main ul"),t.subItem[t.subItem.length-1],"subItem",t.subItem.length-1)})),e.appendChild(a);const r=document.createElement("button");r.type="button",r.classList.add("doneBtn"),r.textContent="✔",r.setAttribute("title","Complete"),r.addEventListener("click",(e=>{t.toggleDone()})),e.appendChild(r);const o=document.createElement("button");o.type="button",o.classList.add("removeBtn"),o.textContent="✕",o.setAttribute("title","Remove"),o.addEventListener("click",(e=>{t.remove()})),e.appendChild(o)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,